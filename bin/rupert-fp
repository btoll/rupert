#!/usr/bin/env node
'use strict';

const fs = require('fs'),
    glob = require('glob'),
    logger = require('onf-logger'),
    argv = require('yargs')
    .usage('Usage: rupert-fp [options]')

    .describe('bitmask', 'The bitmask which determines the nodes to be captured')
    .alias('bitmask', 'b')
    .nargs('bitmask', 1)

    .describe('debug', 'Turns on debug mode')
    .alias('debug', 'd')
    .boolean('debug')

    .describe('html', 'Creates an html document of the analysis')
    .boolean('html')

    .describe('target', 'The target to analyze')
    .alias('target', 't')
    .nargs('target', 1)

    .describe(' -v, --v', 'The level of verbosity')
    .alias('v', 'v')
    .alias('vv', 'vv')

    .help('help')
    .alias('help', 'h')

    .group([
        'PointFree: 1',
        'ImpureFunction: 2',
        'NoLoops: 4',
        'UnnecessaryBraces: 8'
    ], 'Rules:')

    .argv,

    visitor = require('../src/visitor'),
    onfStatic = require('onf-static'),
    target = argv.target,
    bitmask = Number(argv.bitmask),

    // Unfortunately, a single -v returns a Boolean while multiples (-vv, -vvv) return an Array.
    verbosity = argv.v && Array.isArray(argv.v) ?
        argv.v.length :
            argv.v ?
                1 : 0;

onfStatic.setOptions({
//    debugLevel: !argv.debug ? 'NONE' : 'DEBUG',
    type: argv.html ? 'html' : 'log',
    verbose: verbosity,
    visitor // Mixin our node type functions.
});

visitor.setBitmask(
    !isNaN(bitmask) ?
        bitmask :
        255
);

if (!target) {
    const stdin = process.stdin;
    let buf = '';

    stdin.setEncoding('utf8');

    stdin.on('readable', () => {
        const chunk = stdin.read();

        if (chunk !== null) {
            buf += chunk;
        }
    });

    stdin.on('end', () =>
        onfStatic.makeTree(buf, true)
        .then(logger.raw)
        .catch(logger.error)
    );
} else {
    fs.stat(target, (err, stats) => {
        if (err) {
            logger.error('There was a problem accessing the target!');
        } else {
            if (stats.isFile()) {
                onfStatic.makeTree(target)
                .then(logger.raw)
                .catch(logger.error);
            } else {
                glob(`${target}/*.js`, (err, files) => {
                    if (err) {
                        logger.error('There was a problem globbing the files!');
                    } else {
                        files.forEach(file =>
                            onfStatic.makeTree(file)
                            .then(data =>
                                (
                                    logger.info(`Processing file ${file}`),
                                    logger.raw(`${data}`)
                                )
                            )
                            .catch(logger.error)
                        );
                    }
                });
            }
        }
    });
}

