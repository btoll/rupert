#!/usr/bin/env node
'use strict';

const logger = require('logger'),
    argv = require('yargs')
    .usage('Usage: rupert [options]')

    .alias('f', 'file')
    .nargs('f', 1)
    .describe('f', 'The file to analyze')

    .describe('flags', 'Specifies which types are captured')
    .nargs('f', 1)

    .describe('html', 'Creates an html document of the analysis')
    .boolean('html')

    .alias('v', 'debug')
    .boolean('v')
    .describe('v', 'Turns on verbose debug logging')

    .help('h')
    .argv,

    // Default to printing to stdout.
    generator = require(`s/src/generator/${!argv.html ? 'log' : 'html'}`),
    visitor = require('../src/visitor'),
    h = require('s/src/index'),
    file = argv.file,
    flags = Number(argv.flags);

visitor.setFlags(
    !isNaN(flags) ?
        flags :
        255
);

// Logging is enabled by default.
if (!argv.v) {
    logger.disable();
}

// Mixin our node type functions.
h.register(visitor);

if (!file) {
    const stdin = process.stdin;
    let buf = '';

    stdin.setEncoding('utf8');

    stdin.on('readable', () => {
        const chunk = stdin.read();

        if (chunk !== null) {
            buf += chunk;
        }
    });

    stdin.on('end', () => {
        h.makeTree(buf, generator, true)
        .then(logger.raw)
        .catch(logger.error);
    });
} else {
    h.makeTree(file, generator, false)
    .then(logger.raw)
    .catch(logger.error);
}

