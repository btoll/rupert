#!/usr/bin/env node
'use strict';

const logger = require('logger'),
    argv = require('yargs')
    .usage('Usage: rupert [options]')

    .describe('bitmask', 'The bitmask which determines the nodes to be captured')
    .alias('bitmask', 'b')
    .nargs('bitmask', 1)

    .describe('debug', 'Turns on debug logging')
    .alias('debug', 'd')
    .boolean('debug')

    .describe('file', 'The file to analyze')
    .alias('file', 'f')
    .nargs('file', 1)

    .describe('html', 'Creates an html document of the analysis')
    .boolean('html')

    .describe('verbose', 'Show code snippets')
    .alias('verbose', 'v')
    .boolean('v')

    .help('help')
    .alias('help', 'h')

    // TODO
    .group([
        'FunctionNesting: 1',
        'ImpureFunction: 2',
        'NoLoops: 4',
        'UnnecessaryBraces: 8'
    ], 'Rules')
    .argv,

    // Default to raw.
    generator = require(
        `s/src/generator/${
            argv.html ? 'html' :
                argv.v ? 'log' :
                'raw'
        }`
    ),
    visitor = require('../src/visitor'),
    h = require('s/src/index'),
    file = argv.file,
    bitmask = Number(argv.bitmask);

visitor.setBitmask(
    !isNaN(bitmask) ?
        bitmask :
        255
);

// Logging is enabled by default.
if (!argv.debug) {
    logger.disable();
}

// Mixin our node type functions.
h.register(visitor);

if (!file) {
    const stdin = process.stdin;
    let buf = '';

    stdin.setEncoding('utf8');

    stdin.on('readable', () => {
        const chunk = stdin.read();

        if (chunk !== null) {
            buf += chunk;
        }
    });

    stdin.on('end', () => {
        h.makeTree(buf, generator, true)
        .then(logger.raw)
        .catch(logger.error);
    });
} else {
    h.makeTree(file, generator, false)
    .then(logger.raw)
    .catch(logger.error);
}

